Указатель, адресная арифметика

Указатель — переменная, содержащая адрес объекта. Указатель не несет информации о содержимом объекта, а содержит сведения о том, где размещен объект.
Указатель, как и любая переменная, должен быть объявлен.
Общая форма объявления указателя.
Тип *ИмяОбъекта;
Тип указателя— это тип переменной, адрес которой он содержит.
Для работы с указателями в Си определены две операции:
операция * (звездочка) — позволяет получить значение объекта по его адресу — определяет значение переменной, которое содержится по адресу, содержащемуся в указателе;
операция & (амперсанд) — позволяет определить адрес переменной.
Например
Char c;
Char *p;
P = &c;
Указатели нужны, чтобы напрямую обращаться к памяти компютера и иметь возможность оперировать ей без посредников.
Кроме переменных в программе на Си для хранения данных могут использоваться константы, которые предваряются ключевым словом const, и указатели также могут указывать на константы, но в этом случае перед определением указателя также ставится слово const:
Например
#include <stdio.h>
Int main(void)
{
	const int a = 10;
	const int *pa = &a
	printf(“%p %d\n”pa, *pa);
	return 0;
}
Указатель – Переменная, содержащая адрес другой переменной. Для различных типов данных, надо использовать различные указатели.
Объявление указателя похоже на инициализацию обычной переменной, отличительной особенностью является наличие пунктуатора «*».
Пример :
Int a =4;
Int *p =  &a;
Указатель p теперь указывает на адрес, в котором размещено значение переменной a.
Теперь мы можем изменить значение переменной a, используя указатель p.
*p = 6; // Теперь значение a == 6
При работе с указателями важно знать два унарных оператора
<*> - оператор разыменования(извлечение значения по адресу)
<&>- оператор извлечения адреса переменной.
С помощью этих операторов мы можем изменять значения переменных, на которых ссылается указатель, а также изменять место, на которое указатель “указывает”.
При использовании массивов, мы также используем указатели:
int array[5] = {6, 7, 8, 9, 10};
array[2] = 12;
Запись array[2] === *(array + 2). Следует помнить, что название массива распадается в указатель, на его первый элемент. А прибавление/вычитание к/из массиву целого числа имеет следующий смысл.

array + 2 === array + sizeof (int) * 2 (т.к элементы массива расположены последовательно, от первого к последнего, сдвинув наш указатель от 0 на два вправо, получим третий элемент).

Указатели на указатель.

Так как возможно инициализировать указатель, то под него выделяется память. Если память выделяется, то на эту память можно указать. Именно таким смыслом обладает указатель на указатель. Он указывает на область памяти, в которой находится указатель:

int digit = 4;

int *p = &digit;

int **point_to_p = &p;

Теперь point_to_p указывает на адрес, в котором расположен указатель p, для получения значения digit, можно поступить следующим образом:

printf(“%d”,**point_to_p);

*point_to_p == p, следовательно **point_to_p === *p === digit.

Указатели на указатель используются при объявлении многомерного массива.

int arr[2][2] = {1, 2, 3, 4};

arr[1] в данном случае – указатель на два элемента типа int.

Его можно заменить на выражение *(arr + 1)

Соответственно для получения значения 4 (arrr[1][1]), можно использовать:
*(*(arr + 1) + 1)
Используя массив 3 на n получим указатель на указатель на указатель и т.д.
